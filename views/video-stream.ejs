<% layout('layouts/boilerplate') %>
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="/video-stream.css">

  <!-- Error Display -->
  <div id="errorDisplay" class="error-display" style="display: none;"></div>

  <!-- Loading Display -->
  <div id="loadingDisplay" class="loading-display" style="display: none;"></div>

  <!-- Lobby Section -->
  <div id="lobbySection" class="lobby-container">
    <div class="lobby-content">
      <h2>Enter into Lobby</h2>
      <div class="lobby-form">
        <input type="text" id="usernameInput" placeholder="Enter your username" maxlength="50" required />
        <button id="connectBtn" onclick="handleJoinMeeting()">Connect to Meeting</button>
      </div>
      <div class="local-video-container">
        <video id="localVideo" autoplay playsinline muted></video>
      </div>
    </div>
  </div>

  <!-- Meeting Container -->
  <div id="meetingSection" class="meetVideoContainer">
    <!-- Chat Room -->
    <div class="chatRoom">
      <div class="chatContainer">
        <h1>Chat</h1>
        <div class="chattingDisplay" id="chatDisplay">
          <!-- <p class="no-messages">No Messages Yet</p> -->
        </div>
        <div class="chattingArea">
          <input type="text" id="chatInput" placeholder="Type your message..." maxlength="500"
            onkeypress="handleChatKeyPress(event)" />
          <button id="sendChatBtn" onclick="handleSendMessage()">Send</button>
        </div>
      </div>
    </div>

    <!-- Conference Video Area -->
    <div class="conferenceView" id="conferenceArea">
      <div class="participant-video">
        <video autoplay playsinline></video>
        <div class="participant-info">
        </div>
      </div>
    </div>

    <!-- Control Buttons -->
    <div class="buttonContainers">
      <button id="videoToggle" onclick="handleToggleVideo()" title="Toggle Video">
        <i class="material-icons video-on">videocam</i>
        <i class="material-icons video-off hidden">videocam_off</i>
      </button>

      <button id="endCall" onclick="handleEndCall()" title="End Call" class="end-call-btn">
        <i class="material-icons">call_end</i>
      </button>

      <button id="audioToggle" onclick="handleToggleAudio()" title="Toggle Audio">
        <i class="material-icons audio-on">mic</i>
        <i class="material-icons audio-off hidden">mic_off</i>
      </button>

      <button id="screenShare" onclick="handleToggleScreenShare()" title="Share Screen">
        <i class="material-icons share-on">screen_share</i>
        <i class="material-icons share-off hidden">stop_screen_share</i>
      </button>

      <span class="badge" data-badge="" id="chatBadge">
        <button id="chatToggle" onclick="handleToggleChat()" title="Toggle Chat">
          <i class="material-icons">chat</i>
        </button>
      </span>
    </div>

    <!-- User's own video (picture-in-picture)
    <video class="meetUserVideo" id="userVideo" autoplay muted playsinline></video> -->
  </div>

  <!-- Scripts -->
  <script src="/socket.io/socket.io.js"></script>
  <script src="/video-stream.js"></script>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

  <script>
    // Enhanced wrapper functions with error handling
    function handleJoinMeeting() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.joinMeeting) {
          videoClient.joinMeeting();
        } else {
          console.error('Video client not initialized');
          alert('Video client not ready. Please refresh the page.');
        }
      } catch (error) {
        console.error('Error in handleJoinMeeting:', error);
        alert('Failed to join meeting. Please try again.');
      }
    }

    function handleToggleVideo() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.toggleVideo) {
          videoClient.toggleVideo();
        } else {
          console.error('Video client not available');
        }
      } catch (error) {
        console.error('Error in handleToggleVideo:', error);
      }
    }

    function handleToggleAudio() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.toggleAudio) {
          videoClient.toggleAudio();
        } else {
          console.error('Video client not available');
        }
      } catch (error) {
        console.error('Error in handleToggleAudio:', error);
      }
    }

    function handleToggleScreenShare() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.toggleScreenShare) {
          videoClient.toggleScreenShare();
        } else {
          console.error('Video client not available');
        }
      } catch (error) {
        console.error('Error in handleToggleScreenShare:', error);
      }
    }

    function handleToggleChat() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.toggleChat) {
          videoClient.toggleChat();
        } else {
          console.error('Video client not available');
        }
      } catch (error) {
        console.error('Error in handleToggleChat:', error);
      }
    }

    function handleSendMessage() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.sendMessage) {
          videoClient.sendMessage();
        } else {
          console.error('Video client not available');
        }
      } catch (error) {
        console.error('Error in handleSendMessage:', error);
      }
    }

    function handleEndCall() {
      try {
        if (typeof videoClient !== 'undefined' && videoClient.endCall) {
          if (confirm('Are you sure you want to end the call?')) {
            videoClient.endCall();
          }
        } else {
          console.error('Video client not available');
          // Fallback redirect
          window.location.href = "/";
        }
      } catch (error) {
        console.error('Error in handleEndCall:', error);
        // Fallback redirect
        window.location.href = "/";
      }
    }

    function handleChatKeyPress(event) {
      try {
        if (event.key === 'Enter') {
          event.preventDefault();
          handleSendMessage();
        }
      } catch (error) {
        console.error('Error in handleChatKeyPress:', error);
      }
    }

    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function () {
      try {
        // Add loading states to buttons
        const buttons = document.querySelectorAll('button[onclick]');
        buttons.forEach(button => {
          const originalOnClick = button.onclick;
          button.onclick = function (event) {
            // Prevent double-clicks
            if (button.disabled) return;

            // Temporarily disable button
            button.disabled = true;
            setTimeout(() => {
              button.disabled = false;
            }, 1000);

            // Execute original function
            if (originalOnClick) {
              originalOnClick.call(this, event);
            }
          };
        });

        // Add enter key support for username input
        const usernameInput = document.getElementById('usernameInput');
        if (usernameInput) {
          usernameInput.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
              event.preventDefault();
              handleJoinMeeting();
            }
          });
        }

        // Initialize video client status check
        let initCheckAttempts = 0;
        const maxInitChecks = 10;

        const checkVideoClient = setInterval(() => {
          initCheckAttempts++;

          if (typeof videoClient !== 'undefined' && videoClient.isInitialized) {
            console.log('Video client initialized successfully');
            clearInterval(checkVideoClient);
          } else if (initCheckAttempts >= maxInitChecks) {
            console.error('Video client failed to initialize');
            clearInterval(checkVideoClient);

            const errorDisplay = document.getElementById('errorDisplay');
            if (errorDisplay) {
              errorDisplay.textContent = 'Failed to initialize video client. Please refresh the page.';
              errorDisplay.style.display = 'block';
            }
          }
        }, 500);

      } catch (error) {
        console.error('Error in DOMContentLoaded:', error);
      }
    });

    // Global error handler
    window.addEventListener('error', function (event) {
      console.error('Global error:', event.error);
    });

    // Handle unhandled promise rejections
    window.addEventListener('unhandledrejection', function (event) {
      console.error('Unhandled promise rejection:', event.reason);
    });
  </script>