"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleOneTapStrategy = void 0;
const google_auth_library_1 = require("google-auth-library");
const passport_strategy_1 = require("passport-strategy");
class GoogleOneTapStrategy extends passport_strategy_1.Strategy {
    constructor(optionsParam, verifyParam) {
        super();
        this.name = "google-one-tap";
        const withoutOptions = typeof optionsParam === "function";
        const options = withoutOptions ? {} : optionsParam;
        const verify = withoutOptions ? optionsParam : verifyParam;
        if (typeof verify !== "function") {
            throw new Error("GoogleOneTapStrategy requires a verify callback");
        }
        const verifyCsrfToken = options.verifyCsrfToken === undefined ? true : options.verifyCsrfToken;
        this.options = { ...options, verifyCsrfToken };
        this.client = new google_auth_library_1.OAuth2Client(options.clientID, options.clientSecret, options.redirectUri);
        this.verify = options.passReqToCallback
            ? {
                passReqToCallback: true,
                func: verify,
            }
            : {
                passReqToCallback: false,
                func: verify,
            };
    }
    authenticate(req) {
        if (this.options.verifyCsrfToken && !this.isCsrfValid(req)) {
            return;
        }
        const verified = (err, user, info) => {
            if (err) {
                const error = err instanceof Error ? err : new Error(String(err));
                return this.error(error);
            }
            if (!user) {
                return this.fail(info, 401);
            }
            this.success(user, info);
        };
        this.verifyToken(req)
            .then((profile) => {
            if (!profile) {
                return this.fail("No user logged.", 401);
            }
            if (this.verify.passReqToCallback) {
                this.verify.func(req, profile, verified);
            }
            else {
                this.verify.func(profile, verified);
            }
        })
            .catch((err) => {
            this.error(err instanceof Error ? err : new Error(String(err)));
        });
    }
    isCsrfValid(req) {
        const csrfTokenCookie = req.cookies["g_csrf_token"];
        if (!csrfTokenCookie) {
            this.fail("No CSRF token in Cookie.", 400);
            return false;
        }
        const csrfTokenBody = req.body["g_csrf_token"];
        if (!csrfTokenBody) {
            this.fail("No CSRF token in post body.", 400);
            return false;
        }
        if (csrfTokenBody !== csrfTokenCookie) {
            this.fail("Failed to verify double submit cookie.", 400);
            return false;
        }
        return true;
    }
    async verifyToken(req) {
        const token = req.body["credential"];
        if (!token) {
            return;
        }
        const ticket = await this.client.verifyIdToken({
            idToken: token,
            audience: this.options.clientID,
        });
        const payload = ticket.getPayload();
        if (!payload) {
            return;
        }
        const name = payload.family_name && payload.given_name
            ? {
                familyName: payload.family_name,
                givenName: payload.given_name,
            }
            : undefined;
        return {
            id: payload.sub,
            displayName: payload.name || "",
            name,
            provider: this.name,
            emails: payload.email ? [{ value: payload.email }] : [],
            photos: payload.picture ? [{ value: payload.picture }] : [],
        };
    }
}
exports.GoogleOneTapStrategy = GoogleOneTapStrategy;
